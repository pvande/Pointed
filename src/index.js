// Generated by CoffeeScript 1.8.0
(function() {
  var Pointer, Root, copy, extend, hash,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  hash = function(obj, seen) {
    var charCodes, code;
    if (seen == null) {
      seen = [];
    }
    charCodes = JSON.stringify([obj]).split('').map(function(x) {
      return x.charCodeAt(0);
    });
    code = charCodes.reduce((function(a, x) {
      return ((a << 5) - a) + x | 0;
    }), 0);
    return (Math.pow(2, 32) + code).toString(16).slice(-8);
  };

  copy = function(obj) {
    if (typeof obj !== 'object') {
      return obj;
    }
    if (obj instanceof Array) {
      return __slice.call(obj);
    }
    if (obj instanceof Date) {
      return new Date(obj);
    }
    return extend(Object.create(obj.constructor.prototype), obj);
  };

  extend = function(obj, extras) {
    var key, value;
    for (key in extras) {
      if (!__hasProp.call(extras, key)) continue;
      value = extras[key];
      obj[key] = value;
    }
    return obj;
  };

  Root = (function() {
    function Root(data) {
      var events;
      events = {
        'swap': []
      };
      this.listeners = function(key) {
        var _name;
        if (typeof key[0] !== 'string') {
          throw 'Must provide an event name!';
        }
        return events[_name = JSON.stringify(key)] || (events[_name] = []);
      };
      this.swap(data);
    }

    Root.prototype.get = function(path) {
      return extend(new Pointer(this), {
        path: path,
        hash: hash(this.value(path))
      });
    };

    Root.prototype.value = function(path) {
      return path.reduce((function(value, key) {
        if (value != null) {
          return value[key];
        }
      }), this.data);
    };

    Root.prototype.swap = function(data) {
      this.data = data;
    };

    Root.prototype.on = function(key, fn) {
      if (!(fn instanceof Function)) {
        throw 'Must provide a callback!';
      }
      return this.listeners(key).push(fn);
    };

    Root.prototype.off = function(key, fn) {
      var idx, listeners;
      if (!(fn instanceof Function)) {
        throw 'Must provide a callback!';
      }
      listeners = this.listeners(key);
      idx = listeners.indexOf(fn);
      if (idx !== -1) {
        return listeners.splice(idx, 1);
      }
    };

    Root.prototype.emit = function() {
      var data, fn, key, ptr, _i, _len, _ref;
      key = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      ptr = this.get(key.slice(1));
      _ref = this.listeners(key);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fn = _ref[_i];
        fn.apply(ptr, data);
      }
    };

    return Root;

  })();

  Pointer = (function() {
    function Pointer(obj) {
      if (this instanceof Pointer && obj instanceof Root) {
        this.root = obj;
      } else {
        return (new Root(obj)).get([]);
      }
    }

    Pointer.prototype.get = function() {
      var keys;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (keys.length === 1 && keys[0] instanceof Array) {
        keys = keys[0];
      }
      return this.root.get(this.path.concat(keys));
    };

    Pointer.prototype.value = function() {
      var keys;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (keys.length === 1 && keys[0] instanceof Array) {
        keys = keys[0];
      }
      return this.root.value(this.path.concat(keys));
    };

    Pointer.prototype.update = function(fn) {
      var data, key, newHash, parent, value, _i, _ref;
      value = this.value();
      data = fn.call(this, copy(value));
      newHash = hash(data);
      if (this.hash === newHash) {
        return;
      }
      _ref = this.path, parent = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), key = _ref[_i++];
      if (key != null) {
        this.root.get(parent).update(function(obj) {
          obj[key] = data;
          return obj;
        });
      } else {
        this.root.swap(data);
      }
      return this.emit('swap', data, value);
    };

    Pointer.prototype.map = function(fn) {
      var idx, key, value, _, _i, _len, _results, _results1;
      if (fn == null) {
        fn = function(x) {
          return x;
        };
      }
      value = this.value();
      if (value instanceof Array) {
        _results = [];
        for (idx = _i = 0, _len = value.length; _i < _len; idx = ++_i) {
          _ = value[idx];
          _results.push(fn.call(this, this.get(idx), idx));
        }
        return _results;
      } else {
        _results1 = [];
        for (key in value) {
          if (!__hasProp.call(value, key)) continue;
          _results1.push(fn.call(this, this.get(key), key));
        }
        return _results1;
      }
    };

    Pointer.prototype.on = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).on.apply(_ref, [[event].concat(__slice.call(this.path))].concat(__slice.call(args)));
    };

    Pointer.prototype.off = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).off.apply(_ref, [[event].concat(__slice.call(this.path))].concat(__slice.call(args)));
    };

    Pointer.prototype.emit = function() {
      var args, event, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).emit.apply(_ref, [[event].concat(__slice.call(this.path))].concat(__slice.call(args)));
    };

    Pointer.prototype.isEqual = function(other) {
      return hash(this.path) === hash(other.path) && this.hash === other.hash;
    };

    return Pointer;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Pointer;
  } else {
    this.Pointer = Pointer;
  }

}).call(this);
